#include <TinyGPS++.h>
#include <WiFi.h>
#include <PubSubClient.h>

// wifi koneksi
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";

// broker mqtt koneksi
const char* mqtt_server = "broker.hivemq.com"; // Example public broker
const char* mqtt_topic = "esp32/gps";

// Create instances
WiFiClient espClient;
PubSubClient client(espClient);
TinyGPSPlus gps;
HardwareSerial SerialGPS(1); // Use Serial1 for GPS

void setup() {
  Serial.begin(115200);
  SerialGPS.begin(9600, SERIAL_8N1, 16, 17); // RX, TX for GPS

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Set up MQTT
  client.setServer(mqtt_server, 1883);
}

void loop() {
  while (SerialGPS.available() > 0) {
    gps.encode(SerialGPS.read());
    if (gps.location.isUpdated()) {
      sendGPSData();
    }
  }
  
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}

void sendGPSData() {
  String payload = String("Latitude: ") + gps.location.lat() + ", Longitude: " + gps.location.lng();
  client.publish(mqtt_topic, payload.c_str());
  Serial.println("Sent: " + payload);
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      delay(2000);
    }
  }
}
